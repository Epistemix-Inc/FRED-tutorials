
place School {
    has_group_agent = 1
}

variables {
    global NO_CLOSURE
    NO_CLOSURE = 0
    
    global LOCAL_CLOSURE
    LOCAL_CLOSURE = 1

    global GLOBAL_CLOSURE
    GLOBAL_CLOSURE = 2

    global school_closure_policy
    school_closure_policy = NO_CLOSURE
    
    global days_closed
    days_closed = 28

    global global_closure_trigger
    global_closure_trigger = 1000

    global local_closure_trigger
    local_closure_trigger = 20
}


condition SCHOOL {
    group_start_state = Start
    start_state = Start

    state Start {
        wait(0)
        if (is_group_agent(School)) then next(CheckEpidemic)
        if (is_member(School) & age < 18) then next(StudentSchoolOpen)
        default(Excluded)
    }

    state CheckEpidemic {
        wait(0)
    	if (school_closure_policy == LOCAL_CLOSURE) then next(CheckLocalEpidemic)
    	if (school_closure_policy == GLOBAL_CLOSURE) then next(CheckGlobalEpidemic)
        default(CheckCalendar)
    }

    state CheckLocalEpidemic {
        wait(0)
	    if (local_closure_trigger <= current_count_of_INF.Is_in_School) then next(Close)
        default(CheckCalendar)
    }

    state CheckGlobalEpidemic {
        wait(0)
	    if (global_closure_trigger <= current_count_of_INF.Is) then next(Close)
        default(CheckCalendar)
    }

    state CheckCalendar {
        wait(0)
        if (is_date_range(Dec-20,Jan-02)) then next(WinterBreak) 
        if (is_date_range(Mar-10,Mar-15)) then next(SpringBreak)
        if (is_date_range(Jun-15,Aug-25)) then next(SummerBreak)
        default(Open)
    }

    state Open {
	    reopen()
        wait(24)
        default(CheckEpidemic)
    }

    state Close {
        close()
        wait(24*days_closed)
        next(CheckEpidemic)
    }

    state WinterBreak {
        close()
        wait(until(Jan,03))
        next(CheckEpidemic)
    }

    state SpringBreak {
        close()
        wait(until(Mar,16))
        next(CheckEpidemic)
    }

    state SummerBreak {
        close()
        wait(until(Aug,26))
        next(CheckEpidemic)
    }

    state StudentSchoolOpen {
        wait(24)
        if (is_temporarily_closed(School)) then next(StudentSchoolClosed)
        default(StudentSchoolOpen)
    }

    state StudentSchoolClosed {
        absent(School)
        wait(24)
        if (is_temporarily_closed(School)) then next(StudentSchoolClosed)
        default(StudentSchoolOpen)
    }
}

